#!/bin/bash
my_real_dir() {
    if [[ $(type -t progdir) == function ]]
    then
        progdir
    else
        dirname $(realpath $0)
    fi
}

in_tree_file() {
    echo $(my_real_dir)/../bake-intree-init
}

in_tree_file_exist() {
    [[ -f $(in_tree_file) ]]
}

in_tree_file_exist \
    && source $(in_tree_file) \
    || $(bashlibs --load-base)

include verbose.sh
set_verbose_level_to_info
include usage.sh
include deb_repository.sh
include directories.sh

usage() {
    set_column_indentation_gap 13
	cat <<- EOF
	$(section_usage) $(progname) options

	    clean old deb files and preserve the most recent

	$(section_options)
	$(item d dir 'path to deb repository')
	$(item n no-delete 'do not delete files and just print what you will do')
	$(items_test_help_verbose_debug)


	$(section_examples)
	$(example_description 'clean all old deb files and keep the most recent ones')
	$(example $(progname) --dir /home/user/repositories/bashlibs-repository)

	$(example_description "show what you will do, but don't delete old files")
	$(example $(progname) --dir /home/user/repositories/bashlibs-repository -n)
	EOF
}

cmdline() {
    # got this idea from here:
    # http://kirk.webfinish.com/2009/10/bash-shell-script-to-use-getopts-with-gnu-style-long-positional-parameters/
    local arg=
    for arg
    do
        local delim=""
        case "$arg" in
            #translate --gnu-long-options to -g (short options)
            --no-delete) args="${args}-n ";;
                  --dir) args="${args}-d ";;
                 --test) args="${args}-t ";;
                 --help) args="${args}-h ";;
              --verbose) args="${args}-v ";;
                --debug) args="${args}-x ";;
                      #pass through anything else
                      *) [[ "${arg:0:1}" == "-" ]] || delim="\""
                          args="${args}${delim}${arg}${delim} ";;
        esac
    done

    #Reset the positional parameters to the short options
    eval set -- $args

    while getopts "vhxnt:d:" OPTION
    do
         case $OPTION in
         v)
             VERBOSE=$(($VERBOSE+1))
             export readonly VERBOSE
             ;;
         h)
             usage
             exit
             ;;
         x)
             set -x
             readonly DEBUG='-x'
             ;;
         t)
             RUN_TESTS=$OPTARG
             vinfo "Running tests"
             ;;
         d)
             readonly REPOSITORY_DIR=$(realpath $OPTARG)
             ;;
         n)
             NO_DELTE=1
             ;;
         esac
    done

    [[ -z $REPOSITORY_DIR ]] \
        && REPOSITORY_DIR=$(pwd)
}

arches() {
    echo amd64 i386 armhf
}

repository_dir() {
    echo $REPOSITORY_DIR
}

verify_repository_dir() {
    [[ -d $(repository_dir) ]] \
        && vinfo "repository: $(repository_dir)" \
        || eexit "repository: '$(repository_dir)' does not exist"
}

deb_files() {
    ls -1 *.deb \
        2>/dev/null
}

verify_deb_files_exist() {
    [[ -z $(deb_files) ]] \
        && eexit "'$(repository_dir)' does not contain any deb files"
}

deb_files_uniq_names() {
    deb_files \
        | rev \
        | cut -d '-' -f 3- \
        | cut -d '/' -f 1 \
        | rev \
        | sort \
        | uniq
}

deb_file_instances() {
    local deb_name=$1

    ls -1v $deb_name-[0-9].[0-9].[0-9]*.deb \
        2>/dev/null
}

deb_file_instances_count() {
    local deb_name=$1

    deb_file_instances $deb_name \
        | wc -l
}

deb_file_have_more_then_one_instance() {
    local deb_name=$1

    (( $(deb_file_instances_count $deb_name) > 1 ))
}

deb_file_newest_instance() {
    local deb_name=$1

    deb_file_instances $deb_name \
        | tail -1
}

old_deb_file_instances() {
    local deb_name=$1

    deb_file_instances $deb_name \
        | sed '$ d'
}

delete_old_deb_file_instances() {
    local deb_name=$1

    vinfo "keeping $(color white)$(deb_file_newest_instance $deb_name)$(no_color)"
    vinfo "deleting $(color red)$(old_deb_file_instances $deb_name)$(no_color)"

    [[ -z $NO_DELTE ]] \
        && rm -f $(old_deb_file_instances $deb_name)
}

old_deb_files() {
    local repo_dir=$1
    local i
    local arch

    for arch in $(arches)
    do
        binary_dir_exist $arch $repo_dir \
            || return

        cd $(binary_dir $arch $repo_dir)

        for i in $(deb_files_uniq_names)
        do
            deb_file_have_more_then_one_instance $i \
                && delete_old_deb_file_instances $i
        done
    done
}

generate_repo_index() {
    local repository_dir=$1

    cd $repository_dir/../

    dpkg-scanpackages binary /dev/null 2> /dev/null \
        | gzip -9c > binary/Packages.gz

    cd - > /dev/null 2>&1
}

binary_dir() {
    local arch=$1
    local repo_dir=$2

    echo $repo_dir/$arch/binary
}

binary_dir_exist() {
    local arch=$1
    local repo_dir=$2

    [[ -d $(binary_dir $arch $repo_dir) ]]
}

repo_name() {
    local repo_dir=$1

    basename $repo_dir
}

backup_repo_name() {
    local repo_dir=$1

    echo $(repo_name $repo_dir).bak
}

backup_repo_dir() {
    local repo_dir=$1
    local tmpdir=$2

    rsync -a \
        $repo_dir/ \
        $tmpdir/$(backup_repo_name $repo_dir)
}

copy_repository_to_tmp() {
    local repo_dir=$1
    local tmpdir=$2

    vinfo "copying $repo_dir -> $tmpdir"

    backup_repo_dir $repo_dir $tmpdir

    local arch
    for arch in $(arches)
    do
        binary_dir_exist $arch $repo_dir \
            || return

        local tmp_binary_dir=$(binary_dir $arch $tmpdir/$(repo_name $repo_dir))

        mkdir -p $tmp_binary_dir

        rsync -a \
            $(binary_dir $arch $repo_dir)/*.deb \
            $tmp_binary_dir
    done
}

generate_repo_indexs() {
    local repo_dir=$1
    local arch

    for arch in $(arches)
    do
        binary_dir_exist $arch $repo_dir \
            || return

        generate_repo_index $(binary_dir $arch $repo_dir)
    done
}

copy_tmp_repo_to_original_repo() {
    local tmp_repo_dir=$1

    color red

    rsync -av --delete \
        $tmp_repo_dir/ \
        $(repository_dir)

    no_color
}

main() {
    cmdline $(args)
    local tmpdir=$(mktemp -d)
    local tmp_repo_dir=$tmpdir/$(basename $(repository_dir))

    vinfo "repository: $(color yellow)$(repository_dir)$(no_color)"
    copy_repository_to_tmp $(repository_dir) $tmpdir
    #verify_repository_dir
    #verify_deb_files_exist
    old_deb_files $tmp_repo_dir
    generate_repo_indexs $tmp_repo_dir
    copy_tmp_repo_to_original_repo $tmp_repo_dir

    [[ -z $NO_DELTE ]] \
        && safe_delete_directory_from_tmp $tmpdir

    true
}
main
