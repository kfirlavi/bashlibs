#!/bin/bash
BASHLIBS_SOURCE_TREE=$(cd $(dirname $0)/.. ; pwd)
if [[ -f $BASHLIBS_SOURCE_TREE/src/bashlibs-base/lib/base.sh ]]; then
    source $BASHLIBS_SOURCE_TREE/src/bashlibs-base/lib/base.sh
else
    BASHLIBS_SOURCE_TREE=
    source /usr/lib/bashlibs/base.sh
fi

include code_clarity.sh
include verbose.sh
include usage.sh

usage() {
    set_column_indentation_gap 13
	cat <<- EOF
	$(section_usage) $(progname) options

	    $(progname) can provide the path to bash libraries installed.
	    $(progname) can issue tests on all libraries.
	    It allows specifing certain file to test, or to run tests
	    of all libraries.

	$(section_options)
	$(item p library-path 'Show bash libs library path')
	$(item b load-base 'Include the base library in the code')
	$(item i include 'Include a library')
	$(item r run 'execute command/function from one of the bashlibs')
	$(items_test_help_verbose_debug)


	$(section_examples)
	$(example_description 'get library path')
	$(example $(progname) --library-path)

	$(example_description 'Include the base library in the code.')
	$(example_description "Put this line in the start of your file. It will include basic $(progname) functionality.")
	$(example \$\($(progname) --load-base\))

	$(example_description 'To include a library, use this line in your code:')
	$(example \$\($(progname) --include verbose.sh\))

	$(example_description 'Run a command to check if current os is ubuntu:')
	$(example $(progname) --include os_detection.sh --run is_ubuntu \&\& echo LINUX_UBUNTU=ON)

	$(example_test $(progname))
	EOF
}

cmdline() {
	# got this idea from here:
	# http://kirk.webfinish.com/2009/10/bash-shell-script-to-use-getopts-with-gnu-style-long-positional-parameters/
	local arg=
	for arg
	do
		local delim=""
		case "$arg" in
			#translate --gnu-long-options to -g (short options)
		 --library-path) args="${args}-p ";;
		    --load-base) args="${args}-b ";;
		      --include) args="${args}-i ";;
		          --run) args="${args}-r ";;
		         --test) args="${args}-t ";;
			     --help) args="${args}-h ";;
		      --verbose) args="${args}-v ";;
			    --debug) args="${args}-x ";;
                      #pass through anything else
                      *) [[ "${arg:0:1}" == "-" ]] || delim="\""
                          args="${args}${delim}${arg}${delim} ";;
		esac
	done

	#Reset the positional parameters to the short options
	eval set -- $args

	while getopts "vhxpbt:i:r:" OPTION
	do
	     case $OPTION in
		 v)
		     VERBOSE=$(($VERBOSE+1))
             export readonly VERBOSE
		     ;;
		 h)
		     usage
		     exit
		     ;;
		 x)
		     set -x
             readonly DEBUG='-x'
		     ;;
         t)
             RUN_TESTS=$OPTARG
             vinfo "Running tests"
             ;;
         i)
             include $OPTARG
             ;;
         r)
             RUN_COMMAND=$OPTARG
             ;;
         b)
             include_base_library
             exit
             ;;
         p)
             libraries_path
             exit
             ;;
	     esac
	done

	[[ -z $RUN_TESTS && -z $RUN_COMMAND ]] \
		&& usage \
        && exit 1
}

intree_include() {
    [[ -n $BASHLIBS_SOURCE_TREE ]]
}

libraries_path() {
    intree_include \
        && echo $BASHLIBS_SOURCE_TREE \
        || echo /usr/lib/bashlibs
}

include_base_library() {
    save_library_as_included base.sh
    intree_include \
        && echo "source $(libraries_path)/src/bashlibs-base/lib/base.sh" \
        || echo "source $(libraries_path)/base.sh"
}

run_command() {

    if [[ -n $RUN_COMMAND ]]; then
        eval $RUN_COMMAND
        exit $?
    fi
}

main() {
    cmdline $(args)

    include shunit2_enhancements.sh

    run_command

    [[ -n $RUN_TESTS ]] \
        && run_tests \
            $(libraries_tests_dir) \
            $DEBUG
}
main
